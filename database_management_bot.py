"""
Author: Andrew Yaroshevych
Version: 2.5.0
"""
import re
from datetime import datetime

from telegram import ReplyKeyboardMarkup, Update, KeyboardButton, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext

from PIL import Image
from pyzbar.pyzbar import decode
from email.message import EmailMessage

import os
import io
import json
import logging
import smtplib
import configparser
from functools import wraps

from pymongo import MongoClient

import validators

logging.basicConfig(
    format='%(asctime)s.%(msecs)03d - %(name)s - %(funcName)s() - %(levelname)s - %(message)s',
    datefmt='%d/%m/%Y %H:%M:%S', level=logging.INFO
)
logger = logging.getLogger(__name__)

config = configparser.ConfigParser()
config.read("config.ini")

cluster = MongoClient(config['Database']['cluster'])
db = cluster.TestBotDatabase
collection = db.TestBotCollection
admins_collection = db.Administrators
blacklist = db.Blacklist

# Conversation states
NAME, INGREDIENT, ABOUT, PHOTO, CHECK, INSERT, CHANGE_INFO, REWRITE = range(8)
CONTACT = 1
REPORT = 1
REVIEW = 1
STATISTICS, SEND_FILES = range(2)
REASON, BAN = range(2)


MAIN_REPLY_KEYBOARD = [['–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å', '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó', '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫']]

UNDER_MAINTENANCE = True


def under_maintenance(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        user_id = int(update.effective_user.id)

        if user_id != 483571608 and UNDER_MAINTENANCE is True:
            logger.info("Unauthorized maintenance access denied ID: {}".format(user_id))

            update.message.reply_text(
                "‚ùå *The bot is under maintenance*",
                parse_mode="MarkdownV2"
            )
            return
        else:
            logger.info("Maintenance access granted")

        return func(update, context, *args, **kwargs)
    return wrapped


def superuser(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        superusers = config.items("Superusers")

        if user_id not in list(int(value) for key, value in superusers):
            logger.info("Unauthorized superuser access denied ID: {}".format(user_id))

            update.message.reply_text(
                "‚ùå *–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ "
                "–Ω–∞–ª–µ–∂–∏—Ç–µ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º*",
                parse_mode="MarkdownV2"
            )
            return
        else:
            logger.info("Superuser access granted")

        return func(update, context, *args, **kwargs)
    return wrapped


def restricted(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if blacklist.count_documents({"user_id": user_id}) != 0:
            logger.info("User banned by ID: {}".format(user_id))
            blocked_user = blacklist.find_one({"user_id": user_id}, {"_id": 0})

            update.message.reply_text(
                "‚ùå *–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ\.* ID: *{}*".format(user_id) +
                f"\n\n*–ü—Ä–∏—á–∏–Ω–∞*: {blocked_user['reason']} "
                "\n\n–Ø–∫—â–æ –í–∏ –≤–≤–∞–∂–∞—î—Ç–µ, —â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ \- –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞",
                parse_mode='MarkdownV2',
            )
            return
        if admins_collection.count_documents({"user_id": user_id}) != 0:
            logger.info("Admin is already registered. Access granted")
        else:
            update.message.reply_text(
                "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö\. \n\n–í–∞—à ID *{}* –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ "
                "—è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                "\n\n–ê–±–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */authorize*".format(user_id),
                parse_mode='MarkdownV2',
            )
            logger.info("Unauthorized access denied for {}. Asking to authorize".format(user_id))
            return
        return func(update, context, *args, **kwargs)

    return wrapped


@under_maintenance
def start_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    context.user_data["DRUG_INFO"] = {
        "name": "",
        "active_ingredient": "",
        "description": "",
        "code": "",
        "photo": b'',
        "user_id": 0,
        "added_on": ''
    }

    reply_keyboard = MAIN_REPLY_KEYBOARD

    update.message.reply_text(
        'üá∫üá¶ '
        '*–ü—Ä–∏–≤—ñ—Ç\! –Ø –±–æ—Ç –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Telegram MSB\.*'
        '\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é, –±—É–¥—å –ª–∞—Å–∫–∞\. –Ø–∫—â–æ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –±–æ—Ç–æ–º –≤–ø–µ—Ä—à–µ \- —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–¥—ñ–ª "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"'
        '\n\n–¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –±—É–¥—å\-–∫–æ–ª–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ */help*',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )


@under_maintenance
def scan_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s. Scan started", user.first_name, update.message.text)

    reply_keyboard = [['–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è']]

    update.message.reply_text(
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –ø–∞–∫—É–≤–∞–Ω—å, –¥–µ —è –º–æ–∂—É *—á—ñ—Ç–∫–æ* –ø–æ–±–∞—á–∏—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ '
        '–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ\.',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ')
    )


def db_check_availability(code_str) -> bool or None:
    try:
        logger.info("Database quired. Checking availability")
        if collection.count_documents({"code": code_str}) != 0:
            return True
        else:
            return False
    except Exception as e:
        logger.error(e)
        return


def retrieve_db_query(code_str) -> str or None:
    try:
        logger.info("Database quired. Retrieving info")
        query_result = collection.find_one({"code": code_str}, {"_id": 0})
        str_output = f"<b>–ù–∞–∑–≤–∞</b>: {query_result['name']} " \
                     f"\n<b>–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞</b>: {query_result['active_ingredient']} " \
                     f"\n<b>–û–ø–∏—Å</b>: {query_result['description']} "
        return str_output
    except Exception as e:
        logger.info(e)
        return


def retrieve_db_photo(code_str) -> Image or None:
    try:
        query_result = collection.find_one({"code": code_str}, {"_id": 0})
        logger.info("Database quired")

        if query_result['photo'] == b'':
            logger.info("Field 'photo' is empty")
            return

        logger.info("Retrieving photo")
        img = Image.open(io.BytesIO(query_result['photo']))
        return img
    except Exception as e:
        logger.info(e)
        return


@under_maintenance
def retrieve_scan_results(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: Photo received", user.first_name)

    if update.message.photo:
        id_img = update.message.photo[-1].file_id
    else:
        return

    foto = context.bot.getFile(id_img)

    new_file = context.bot.get_file(foto.file_id)
    new_file.download('code.png')

    try:
        logger.info("Trying to decode")

        result = decode(Image.open('code.png'))
        code_str = result[0].data.decode("utf-8")
        context.user_data.setdefault("DRUG_INFO", {})["code"] = code_str
        print(context.user_data)
        reply_keyboard = [['–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è', '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É']]
        reply_keyboard2 = [['–¢–∞–∫', '–ù—ñ']]

        if db_check_availability(code_str) and retrieve_db_photo(code_str) is not None:
            logger.info("The barcode is present in the database")
            img = retrieve_db_photo(code_str)
            img.save("retrieved_image.jpg")

            update.message.reply_photo(
                open("retrieved_image.jpg", 'rb'),
                parse_mode='HTML',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ'),
                caption='‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ ' + '<b>' + code_str + '</b>' +
                        ' –Ω–∞—è–≤–Ω–∏–π —É –º–æ—ó–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:\n\n' +
                        retrieve_db_query(code_str),
                quote=True
            )

            os.remove("retrieved_image.jpg")
        elif db_check_availability(code_str):
            logger.info("The barcode is present in the database but photo is missing")

            update.message.reply_text(
                parse_mode='HTML',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ'),
                text='‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ ' + '<b>' + code_str + '</b>' +
                     ' –Ω–∞—è–≤–Ω–∏–π —É –º–æ—ó–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:\n\n' +
                     retrieve_db_query(code_str) +
                     '\n\n‚ö†Ô∏è –§–æ—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—î',
                quote=True
            )
        else:
            logger.info("The barcode is missing from the database. Asking to add info")
            link = 'https://www.google.com/search?q=' + code_str

            update.message.reply_text(
                parse_mode='HTML',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard2, one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ'),
                text='‚ùå –®—Ç—Ä–∏—Ö-–∫–æ–¥ ' + '<b>' + code_str + '</b>' +
                     ' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –º–æ—ó–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.\n\n' +
                     '–ß–∏ –±–∞–∂–∞—î—Ç–µ –í–∏ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç?'
                     f'\n\n–î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç —É '
                     f'<a href="{link}"><b>Google</b></a>',
                quote=True,
                disable_web_page_preview=True
            )

    except IndexError as e:
        logger.info("Failed to scan")

        reply_keyboard = [['–©–µ —Ä–∞–∑', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó']]

        update.message.reply_text(
            text="*–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞\. –ú–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å–∫–∞–Ω—É–≤–∞—Ç–∏ —à—Ç—Ä–∏—Ö\-–∫–æ–¥ ‚ùå *"
                 "\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ "
                 "–ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ä–æ–±–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\.",
            quote=True,
            parse_mode='MarkdownV2',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )
    finally:
        logger.info("Operation ended. Deleting barcode image")
        os.remove("code.png")


@under_maintenance
@restricted
def start_adding(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("User %s started adding process", user.first_name)

    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

    if update.message.text != "–¢–∞–∫" and not update.message.photo:
        logger.info("Photo is missing, asking to scan one")

        update.message.reply_text(
            '–î–æ–±—Ä–µ.\n–°–ø–µ—Ä—à—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             resize_keyboard=True,
                                             input_field_placeholder='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ')
        )

        return NAME
    elif not update.message.photo:
        logger.info("Photo already scanned, asking for a name")
        update.message.reply_text(
            '–î–æ–±—Ä–µ.\n–°–ø–µ—Ä—à—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—É',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             resize_keyboard=True,
                                             input_field_placeholder='–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É')
        )
        return INGREDIENT


@under_maintenance
def get_name(update: Update, context: CallbackContext) -> int or None:
    logger.info("Storing photo")

    user = update.message.from_user
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

    if update.message.photo:
        id_img = update.message.photo[-1].file_id
    else:
        return

    foto = context.bot.getFile(id_img)
    foto.download('code.png')

    try:
        result = decode(Image.open('code.png'))
        code_str = result[0].data.decode("utf-8")
        if db_check_availability(code_str):
            logger.info("This barcode already exists. Cancelling adding process")

            update.message.reply_text(
                text="‚ö†Ô∏è –ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç –∑ —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.",
                quote=True
            )

            return cancel(update=update, context=context)
        else:
            logger.info("Barcode scanned successfully")
            context.user_data.setdefault("DRUG_INFO", {})["code"] = code_str
            logger.info("Storing barcode info")
            update.message.reply_text(
                text="–®—Ç—Ä–∏—Ö-–∫–æ–¥ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ ‚úÖ",
                quote=True
            )

    except IndexError as e:
        logger.info("Failed to scan")

        update.message.reply_text(
            text="*–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞\. –ú–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥—Å–∫–∞–Ω—É–≤–∞—Ç–∏ —à—Ç—Ä–∏—Ö\-–∫–æ–¥ ‚ùå *"
                 "\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ä–æ–±–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —â–µ —Ä–∞–∑, "
                 "–∞–±–æ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ */help*",
            quote=True,
            parse_mode='MarkdownV2',
        ),

        return start_adding(update=update, context=context)
    finally:
        os.remove("code.png")

    logger.info("Asking for a name")
    update.message.reply_text(
        text='–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—É',
        reply_markup=ForceReply(input_field_placeholder="–ù–∞–∑–≤–∞")
    )

    return INGREDIENT


@under_maintenance
def get_active_ingredient(update: Update, context: CallbackContext) -> int:
    logger.info("Entered name of the drug: %s", update.message.text)

    user = update.message.from_user
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

    name = update.message.text
    if validators.check_name(name) is None:
        logger.info("Name is not correct, asking to retry", update.message.text)

        update.message.reply_text(
            text='*–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É*'
                 f'\n\n–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ "{name}" –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏',
            parse_mode="MarkdownV2",
            reply_markup=ForceReply(input_field_placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å")
        )
        return INGREDIENT

    context.user_data.setdefault("DRUG_INFO", {})["name"] = name

    logger.info("Asking for an active ingredient")

    update.message.reply_text(
        text='–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥—ñ—é—á—É —Ä–µ—á–æ–≤–∏–Ω—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—É',
        reply_markup=ForceReply(input_field_placeholder="–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞")
    )

    return ABOUT


@under_maintenance
def get_about(update: Update, context: CallbackContext) -> int:
    logger.info("Entered active ingredient of the drug: %s", update.message.text)

    user = update.message.from_user
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

    active_ingredient = update.message.text
    if validators.check_active_ingredient(active_ingredient) is None:
        logger.info("Active ingredient is not correct, asking to retry", update.message.text)

        update.message.reply_text(
            text='*–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –¥—ñ—é—á–æ—ó —Ä–µ—á–æ–≤–∏–Ω–∏*'
                 f'\n\n–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ –¥—ñ—é—á–æ—ó —Ä–µ—á–æ–≤–∏–Ω–∏ "{active_ingredient}" –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏',
            parse_mode="MarkdownV2",
            reply_markup=ForceReply(input_field_placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å")

        )
        return ABOUT

    context.user_data["DRUG_INFO"]["active_ingredient"] = active_ingredient

    logger.info("Asking for a description")

    update.message.reply_text(
        text='–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥–∞–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É',
        reply_markup=ForceReply(input_field_placeholder="–û–ø–∏—Å")
    )

    return PHOTO


@under_maintenance
def get_photo(update: Update, context: CallbackContext) -> int:
    logger.info("Entered description: %s. Asking for a photo", update.message.text)

    user = update.message.from_user
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']]

    description = update.message.text
    try:
        if validators.check_description(description) != description:
            logger.info("Description is not correct, asking to retry")

            reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

            update.message.reply_text(
                text=f'–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—Å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é'
                     f'\n\n–ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞: {validators.check_description(description)}',
                reply_markup=ForceReply(input_field_placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å")
            )
            return PHOTO
    except Exception as e:
        logger.info("Description is not correct, asking to retry")
        logger.info(e)

        reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

        update.message.reply_text(
            text=f'–ú–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –æ–ø–∏—Å!',
            reply_markup=ForceReply(input_field_placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å")
        )
        return PHOTO

    context.user_data["DRUG_INFO"]["description"] = description

    update.message.reply_text(
        text='–¢–∞–∫–æ–∂, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ —É–ø–∞–∫–æ–≤–∫–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—É.'
             '\n\n(–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è) –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         resize_keyboard=True,
                                         input_field_placeholder="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ")
    )
    return CHECK


@under_maintenance
def skip_photo(update: Update, context: CallbackContext) -> int:
    return CHECK


@under_maintenance
def check_info(update: Update, context: CallbackContext) -> int:
    logger.info("Now checking info")

    user = update.message.from_user

    drug_info = context.user_data["DRUG_INFO"]

    output = f"<b>–ù–∞–∑–≤–∞</b>: {drug_info['name']} " \
             f"\n<b>–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞</b>: {drug_info['active_ingredient']} " \
             f"\n<b>–û–ø–∏—Å</b>: {drug_info['description']} "

    reply_keyboard = [['–¢–∞–∫, –¥–æ–¥–∞—Ç–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö', '–ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é', '–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏']]

    if update.message.photo:
        id_img = update.message.photo[-1].file_id
        photo = context.bot.getFile(id_img)
        photo.download('photo.jpg')

        img = Image.open("photo.jpg")
        image_bytes = io.BytesIO()
        img.save(image_bytes, format='JPEG')

        context.user_data["DRUG_INFO"]["photo"] = image_bytes.getvalue()

        update.message.reply_photo(
            open("photo.jpg", 'rb'),
            caption='<b>–í–≤–µ–¥–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n' + output +
                    '\n\n‚ùì–í–∏ —Ç–æ—á–Ω–æ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —ó—ó –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö?',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )
        os.remove("photo.jpg")
    elif update.message.text and drug_info.setdefault("photo", b'') == b'':
        update.message.reply_text(
            text='<b>–í–≤–µ–¥–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n' +
                 '‚ö†Ô∏è –§–æ—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—î\n' + output +
                 '\n\n‚ùì–í–∏ —Ç–æ—á–Ω–æ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —ó—ó –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö?',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )
    else:
        img = Image.open(io.BytesIO(drug_info['photo']))
        img.save("photo.jpg")

        update.message.reply_photo(
            open("photo.jpg", 'rb'),
            caption='<b>–í–≤–µ–¥–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n' + output +
                    '\n\n‚ùì–í–∏ —Ç–æ—á–Ω–æ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —ó—ó –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö?',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )
        os.remove("photo.jpg")
    return INSERT


@under_maintenance
def insert_to_db(update: Update, context: CallbackContext) -> int or ConversationHandler.END:
    user = update.message.from_user

    reply_keyboard = MAIN_REPLY_KEYBOARD

    if update.message.text == '–¢–∞–∫, –¥–æ–¥–∞—Ç–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö':
        user_id = update.effective_user.id

        context.user_data["DRUG_INFO"]["user_id"] = user_id
        context.user_data["DRUG_INFO"]["added_on"] = datetime.now().strftime("%d/%m/%Y, %H:%M:%S")

        collection.insert_one(context.user_data["DRUG_INFO"])
        logger.info("Checked info. Added successfully")
        update.message.reply_text(
            text='‚úÖ –ü—Ä–µ–ø–∞—Ä–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )

        logger.info("Clearing info: %s", context.user_data["DRUG_INFO"])
        context.user_data["DRUG_INFO"].clear()
        logger.info("Cleared")

    elif update.message.text == '–ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é':
        reply_keyboard_change = [['–ù–∞–∑–≤–∞', '–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞', '–û–ø–∏—Å']]
        update.message.reply_text(
            text='–ì–∞—Ä–∞–∑–¥, —è–∫–µ –ø–æ–ª–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard_change, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )
        return CHANGE_INFO

    else:
        logger.info("User %s canceled adding process", user.first_name)
        update.message.reply_text(
            text='‚òëÔ∏è –ì–∞—Ä–∞–∑–¥, –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )

    return ConversationHandler.END


@under_maintenance
def change_info(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è']]

    if update.message.text == '–ù–∞–∑–≤–∞':
        context.user_data["change"] = "name"
        update.message.reply_text(
            text='–î–æ–±—Ä–µ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )
    if update.message.text == '–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞':
        context.user_data["change"] = "active_ingredient"
        update.message.reply_text(
            text='–î–æ–±—Ä–µ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥—ñ—é—á–æ—ó —Ä–µ—á–æ–≤–∏–Ω–∏',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )
    if update.message.text == '–û–ø–∏—Å':
        context.user_data["change"] = "description"
        update.message.reply_text(
            text='–î–æ–±—Ä–µ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
        )

    return REWRITE


@under_maintenance
def rewrite(update: Update, context: CallbackContext) -> check_info:
    if context.user_data["change"] == "name":
        context.user_data["DRUG_INFO"]["name"] = update.message.text
        return check_info(update=update, context=context)
    if context.user_data["change"] == "active_ingredient":
        context.user_data["DRUG_INFO"]["active_ingredient"] = update.message.text
        return check_info(update=update, context=context)
    if context.user_data["change"] == "description":
        context.user_data["DRUG_INFO"]["description"] = update.message.text
        return check_info(update=update, context=context)


@under_maintenance
def cancel(update: Update, context: CallbackContext) -> ConversationHandler.END:
    user = update.message.from_user
    reply_keyboard = MAIN_REPLY_KEYBOARD

    logger.info("User %s canceled the adding process", user.first_name)
    update.message.reply_text(
        text='‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ü—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True, resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )

    return ConversationHandler.END


@under_maintenance
def file_warning(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: File warning", user.first_name)

    reply_keyboard = [['–©–µ —Ä–∞–∑']]

    update.message.reply_text(
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é*, –∞ –Ω–µ —Ñ–∞–π–ª\.',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ')
    )


@under_maintenance
def main_keyboard_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = MAIN_REPLY_KEYBOARD

    if update.message.text not in ["–ó—Ä–æ–∑—É–º—ñ–ª–æ!", "–ù—ñ"]:
        update.message.reply_text(
            '‚òëÔ∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )
    else:
        update.message.reply_text(
            '–ì–∞—Ä–∞–∑–¥',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )


@under_maintenance
def instructions_handler(update: Update, context: CallbackContext) -> ConversationHandler.END:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–ó—Ä–æ–∑—É–º—ñ–ª–æ!']]

    pic = 'resources/How_to_scan.png'
    update.message.reply_photo(
        open(pic, 'rb'),
        caption='üîç –©–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —à—Ç—Ä–∏—Ö\-–∫–æ–¥—É —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö \- –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–æ—Ç–æ '
                '–ø–∞–∫—É–≤–∞–Ω–Ω—è, –¥–µ —è –º–æ–∂—É *—á—ñ—Ç–∫–æ* –ø–æ–±–∞—á–∏—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥\.'
                '\n\n‚úèÔ∏è –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –æ–¥—Ä–∞–∑—É –¥–µ–∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π\.'
                '\n\n‚ùóÔ∏è –ê–±–∏ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é '
                '"–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç", –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é */add*'
                '\n\n–¢–∞–∫–æ–∂, –æ–ø–µ—Ä–∞—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞'
                ' –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ \- *–±–æ—Ç —Å–∞–º –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î* –í–∞–º –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —à—Ç—Ä–∏—Ö\-–∫–æ–¥\.'
                '\n\n‚òëÔ∏è –ü—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—É\. *–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤* —É –Ω–∞–∑–≤—ñ\.'
                '\n‚òëÔ∏è –î–∞–ª—ñ –≤–∫–∞–∂—ñ—Ç—å –¥—ñ—é—á—É —Ä–µ—á–æ–≤–∏–Ω—É –¥–∞–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É *—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é*\.'
                '\n‚òëÔ∏è –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å *—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é*\. '
                '\n\n*–û–ø–∏—Å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:*'
                '\n*1\.* –û—Å–Ω–æ–≤–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–µ–ø–∞—Ä–∞—Ç—É \(–ø–æ–∫–∞–∑–∞–Ω–Ω—è –¥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è\)'
                '\n*2\.* –ü—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è, —è–∫—â–æ —Ç–∞–∫—ñ —ñ—Å–Ω—É—é—Ç—å'
                '\n\nüì© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–º –≤—ñ–¥–≥—É–∫ –º–æ–∂–Ω–∞ –æ–±—Ä–∞–≤—à–∏ –æ–ø—Ü—ñ—é "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫" —ñ–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é,'
                '–∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ—é */review*'
                '\n\n ‚Ü©Ô∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –±—É–¥—å\-—è–∫—É –¥—ñ—é –º–æ–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–æ—é */cancel*'
                '\n\n üí¨ –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –±—É–¥—å\-—è–∫–∏–π –º–æ–º–µ–Ω—Ç, '
                '–Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É */help*',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return ConversationHandler.END


@under_maintenance
def register(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_id = update.effective_user.id

    logger.info("%s: Started authorization", user.first_name)

    if admins_collection.count_documents({"user_id": user_id}) != 0:
        logger.info("Admin is already registered, cancelling adding process")

        reply_keyboard = MAIN_REPLY_KEYBOARD

        update.message.reply_text(
            text="‚òëÔ∏è –í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard)
        )
        return ConversationHandler.END

    contact_button = KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    cancel_button = KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")
    custom_keyboard = [[contact_button, cancel_button]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True,
                                       input_field_placeholder='–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è')
    update.message.reply_text(
        text='üîê –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –∑–∞–±–µ—Å–ø–µ—á–µ–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø–∞–º—É'
             '\n\n‚úÖ *–ê–±–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç"*'
             '\n\n‚Ü©Ô∏è –Ø–∫—â–æ –≤–∏ –Ω–µ –±–∞–∂–∞—î—Ç–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"'
             '\n‚ùï –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É \- –Ω–µ –ø—Ä–æ–π—à–æ–≤—à–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –≤–∏ *–Ω–µ –∑–º–æ–∂–µ—Ç–µ* –≤–Ω–æ—Å–∏—Ç–∏ –∑–º—ñ–Ω–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
        parse_mode="MarkdownV2",
        reply_markup=reply_markup)

    return CONTACT


@under_maintenance
def add_admin(update: Update, context: CallbackContext) -> ConversationHandler.END:
    logger.info("User send contact")

    reply_keyboard = MAIN_REPLY_KEYBOARD

    post_id = admins_collection.insert_one(update.message.contact.to_dict()).inserted_id
    user_id = update.effective_user.id
    user = update.message.from_user

    phone_number_markdown = update.message.contact.phone_number.replace('+', '\+')
    update.message.reply_text(
        text=f"‚úÖ *{user.first_name}*, –í–∞—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
             f"\n\n–í–∞—à ID: *{user_id}*"
             f"\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: *{phone_number_markdown}*",
        parse_mode="MarkdownV2",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )

    logger.info("Added new admin successfully. Admin ID: {}".format(user_id))
    return ConversationHandler.END


@under_maintenance
def cancel_register(update: Update, context: CallbackContext):
    reply_keyboard = MAIN_REPLY_KEYBOARD

    update.message.reply_text(
        text="‚òëÔ∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return ConversationHandler.END


@under_maintenance
def start_report(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]

    drug_info = context.user_data.setdefault("DRUG_INFO", {})

    if drug_info.setdefault("code", '') == "":
        update.message.reply_text(
            text="‚ö†Ô∏èÔ∏èÔ∏è –ù–µ–º–∞—î –ø—Ä–æ —â–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏, —Å–ø–µ—Ä—à—É –≤—ñ–¥—Å–∫–∞–Ω—É–π—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥"
        )
        scan_handler(update=update, context=context)
        return ConversationHandler.END
    if db_check_availability(drug_info["code"]) is False:
        update.message.reply_text(
            text="‚ö†Ô∏èÔ∏èÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥, —â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –±–∞–∑—ñ –±–∞–Ω–∏—Ö"
        )
        return cancel_report(update=update, context=context)

    update.message.reply_text(
        text=f"‚ùóÔ∏èÔ∏è *–í–∏ –ø–æ–≤—ñ–¥–æ–º–ª—è—î—Ç–µ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç –∑—ñ —à—Ç—Ä–∏—Ö\-–∫–æ–¥–æ–º __{drug_info['code']}__*"
             "\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏",
        parse_mode="MarkdownV2",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏')
    )
    return REPORT


@under_maintenance
def add_report_description(update: Update, context: CallbackContext) -> ConversationHandler.END:
    report_description = update.message.text
    logger.info("User reported: %s", report_description)

    reply_keyboard = MAIN_REPLY_KEYBOARD

    drug_info = context.user_data["DRUG_INFO"]

    document = collection.find_one({"code": drug_info["code"]})
    if "report" in document:
        number = int(re.findall('\[.*?]', document["report"])[-1].strip("[]"))
        collection.update_one({"code": drug_info["code"]},
                              {"$set": {"report": document["report"] + f", [{number + 1}]: " + report_description}})
    else:
        collection.update_one({"code": drug_info["code"]}, {"$set": {"report": "[1]: " + report_description}})

    update.message.reply_text(
        text="‚úÖÔ∏è –î—è–∫—É—î–º–æ. –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–≤—ñ–¥–æ–º–∏–ª–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return ConversationHandler.END


@under_maintenance
def cancel_report(update: Update, context: CallbackContext) -> ConversationHandler.END:
    reply_keyboard = MAIN_REPLY_KEYBOARD

    update.message.reply_text(
        text="‚òëÔ∏è –í—ñ–¥–≥—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )

    context.user_data["DRUG_INFO"]["code"] = ''
    return ConversationHandler.END


@under_maintenance
def cancel_default(update: Update, context: CallbackContext) -> None:
    reply_keyboard = MAIN_REPLY_KEYBOARD
    update.message.reply_text(
        text="‚ÑπÔ∏èÔ∏è –£—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )


@under_maintenance
def start_review(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]

    update.message.reply_text(
        text=f"üíå *–í–∞—à –≤—ñ–¥–≥—É–∫ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤*"
             "\n\n–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫",
        parse_mode="MarkdownV2",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–í—ñ–¥–≥—É–∫')
    )
    return REVIEW


@under_maintenance
def send_review(update: Update, context: CallbackContext) -> ConversationHandler.END:
    review_msg = update.message.text
    user = update.message.from_user

    logger.info("User reviewed: %s", review_msg)

    reply_keyboard = MAIN_REPLY_KEYBOARD

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as smtp:
            smtp.ehlo()
            smtp.starttls()
            smtp.ehlo()

            address = config['Mail']['address']
            password = config['Mail']['password']

            smtp.login(address, password)

            msg = EmailMessage()

            msg['Subject'] = "User response for MSB DB Management Bot"
            msg['From'] = address
            msg['To'] = address

            user_data = f"<br><br><br><b>User ID:</b> {update.effective_user.id}<br><b>User name:</b> {user.first_name}"
            message = review_msg + user_data

            content = \
                f"""<!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>User Response</title>
                </head>
                
                <link rel="preconnect" href="https://fonts.googleapis.com">
                <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
                <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300&display=swap" rel="stylesheet">
                <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200&display=swap" rel="stylesheet">
                
                <body style="background-image: linear-gradient(160deg, #0d1d1b, #041421);">
                <h1 style="color: #ffffff; font-family: 'Nunito', sans-serif; text-align: center; padding-top: 20px;">
                    User Response
                </h1>
                
                <p style="color: #ffffff; font-family: 'Nunito', sans-serif; font-size:120%; padding: 10px 50px;">
                    {message}
                </p>
                
                <div style="position:fixed;
                            left:0;
                            bottom:0;
                            height:70px;
                            width:100%;
                            border-top: 1px solid #ffffff;
                            ">
                <p align="center"><a style="text-decoration: none;
                                            margin-bottom: 0px;
                                            color: #ffffff;
                                            font-family: 'Nunito', sans-serif;" 
                                            href="https://t.me/medicine_search_bot">
                                            <img style="max-width: 40px;" 
                                                        src="https://www.linkpicture.com/q/MSB_Logo_transparent.png" 
                                                        alt="Logo"></a></p>
                </div>
                </body>
                </html>"""

            msg.set_content(content, subtype='html')
            smtp.send_message(msg)

        update.message.reply_text(
            text="*–©–∏—Ä–æ –¥—è–∫—É—î–º–æ* ‚ù§Ô∏è "
                 "\n\n–í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\. –ú–∏ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ —Ä–æ–∑–≥–ª—è–Ω–µ–º –π–æ–≥–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º",
            parse_mode="MarkdownV2",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )
    except Exception as e:
        logger.warning(e)
        update.message.reply_text(
            text="*–£–ø—Å\.\.\. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫* üòûÔ∏è"
                 "\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\.",
            parse_mode="MarkdownV2",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )

    return ConversationHandler.END


@under_maintenance
@superuser
def statistics_for_user(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]

    update.message.reply_text(
        text="–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return STATISTICS


def get_admin_info(user_id):
    admin_info = admins_collection.find_one({"user_id": user_id}, {"_id": 0})
    return "\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: " + json.dumps(admin_info, sort_keys=False, ensure_ascii=False, indent=4)


def get_banned_info(user_id):
    banned_info = blacklist.find_one({"user_id": user_id}, {"_id": 0})
    return "\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: " + json.dumps(banned_info, sort_keys=False, ensure_ascii=False, indent=4)


@under_maintenance
def show_statistics(update: Update, context: CallbackContext) -> ConversationHandler.END:
    reply_keyboard = [['–ó–∞–≤–µ—Ä—à–∏—Ç–∏']]

    entered_id = int(update.message.text)
    context.user_data["entered_id"] = entered_id

    try:
        documents_quantity = collection.count_documents({"user_id": entered_id})
        reports_quantity = collection.count_documents({"user_id": entered_id, "report": {'$exists': 'true'}})
        is_admin = admins_collection.count_documents({"user_id": entered_id}) > 0
        is_banned = blacklist.count_documents({"user_id": entered_id}) > 0

    except Exception as e:
        logger.info(e)

        update.message.reply_text(
            text=f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫: \n\n{e}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )
    else:
        if documents_quantity == 0 and not is_admin and not is_banned == 0:
            update.message.reply_text(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ *{}* –≤—ñ–¥—Å—É—Ç–Ω—è ‚ö†Ô∏è".format(entered_id),
                parse_mode="MarkdownV2",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                 one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
            )
        else:
            if is_admin:
                admin_info = get_admin_info(entered_id)
            else:
                admin_info = ''

            if is_banned:
                banned_info = get_banned_info(entered_id)
            else:
                banned_info = ''

            if reports_quantity > 0:
                reply_keyboard[0].insert(0, '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–∫–∞—Ä–≥')

            if documents_quantity > 0:
                reply_keyboard[0].insert(0, '–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞–Ω—ñ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏')

            update.message.reply_text(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{}</b>\n\nÔ∏è".format(entered_id) +
                f"<b>–î–æ–¥–∞–Ω–æ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤</b>: {documents_quantity}"
                f"\n<b>–ü–æ–¥–∞–Ω–∏—Ö —Å–∫–∞—Ä–≥ –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é</b>: {reports_quantity}"
                f"\n<b>–ß–∏ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>: {is_admin}{admin_info}"
                f"\n<b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ</b>: {is_banned}{banned_info}",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                 one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
            )

    context.user_data["reply_keyboard"] = reply_keyboard
    return SEND_FILES


@under_maintenance
def send_files(update: Update, context: CallbackContext) -> ConversationHandler.END:
    entered_id = context.user_data["entered_id"]

    reply_keyboard = context.user_data["reply_keyboard"]

    if update.message.text == '–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞–Ω—ñ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏':
        medicine_by_user_id = list(
            collection.find({"user_id": entered_id}, {"_id": 0, "photo": 0, "report": 0, "user_id": 0}))

        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(medicine_by_user_id, f, sort_keys=False, ensure_ascii=False, indent=4)

        update.message.reply_document(
            document=open('data.json', 'rb'),
            filename=f"Statistics_for_{entered_id}.json",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )
        os.remove('data.json')

    if update.message.text == '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–∫–∞—Ä–≥':
        medicine_by_user_id = list(collection.find({"user_id": entered_id, "report": {'$exists': 'true'}},
                                                   {"_id": 0, "photo": 0, "user_id": 0, "active_ingredient": 0,
                                                    "description": 0}))

        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(medicine_by_user_id, f, sort_keys=False, ensure_ascii=False, indent=4)

        update.message.reply_document(
            document=open('data.json', 'rb'),
            filename=f"Reports_for_{entered_id}.json",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                             one_time_keyboard=True,
                                             resize_keyboard=True,
                                             input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
        )
        os.remove('data.json')

    return SEND_FILES


@under_maintenance
def cancel_statistics(update: Update, context: CallbackContext) -> ConversationHandler.END:
    reply_keyboard = MAIN_REPLY_KEYBOARD

    update.message.reply_text(
        text="‚òëÔ∏è –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return ConversationHandler.END


@under_maintenance
@superuser
def start_ban(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]

    update.message.reply_text(
        text="–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return REASON


@under_maintenance
def get_reason(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]

    context.user_data["user_id"] = int(update.message.text)

    update.message.reply_text(
        text="–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return BAN


@under_maintenance
def ban_user(update: Update, context: CallbackContext) -> ConversationHandler.END:
    reply_keyboard = MAIN_REPLY_KEYBOARD

    reason = update.message.text

    post = {
        "user_id": context.user_data["user_id"],
        "reason": reason,
        "banned_on": datetime.now().strftime("%d/%m/%Y, %H:%M:%S")
    }

    post_id = blacklist.insert_one(post).inserted_id

    update.message.reply_text(
        text="‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return ConversationHandler.END


@under_maintenance
def cancel_ban(update: Update, context: CallbackContext) -> ConversationHandler.END:
    reply_keyboard = MAIN_REPLY_KEYBOARD

    update.message.reply_text(
        text="‚òëÔ∏è –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                         one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é')
    )
    return ConversationHandler.END


def main() -> None:
    updater = Updater(config['Database']['token'])
    dispatcher = updater.dispatcher

    scan = MessageHandler(Filters.regex('^(–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å|/scan|–©–µ —Ä–∞–∑)$'), scan_handler)
    start = CommandHandler('start', start_handler)
    cancel_echo = CommandHandler('cancel', cancel_default)
    decoder = MessageHandler(Filters.photo, retrieve_scan_results)
    decoder_str = MessageHandler(Filters.regex('^\d{13}$'), retrieve_scan_results)
    not_file = MessageHandler(Filters.attachment, file_warning)
    end_scan = MessageHandler(Filters.regex('^(–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è|–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è|–ó—Ä–æ–∑—É–º—ñ–ª–æ!|–ù—ñ)$'),
                              main_keyboard_handler)
    instructions = MessageHandler(Filters.regex('^(–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó|/help)$'), instructions_handler)

    add_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^(–¢–∞–∫|–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç|/add)$'), start_adding)],
        states={
            NAME: [
                MessageHandler(Filters.photo & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), get_name)
            ],
            INGREDIENT: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"),
                               get_active_ingredient)
            ],
            ABOUT: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), get_about),
            ],
            PHOTO: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), get_photo),
                MessageHandler(Filters.regex('^(–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)$')
                               & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), skip_photo)
            ],
            CHECK: [
                MessageHandler(Filters.photo & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), check_info),
                MessageHandler(Filters.regex('^(–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)$')
                               & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), check_info)
            ],
            INSERT: [
                MessageHandler(Filters.text & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), insert_to_db)
            ],
            CHANGE_INFO: [
                MessageHandler(Filters.regex('^(–ù–∞–∑–≤–∞|–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞|–û–ø–∏—Å)$') & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"),
                               change_info)
            ],
            REWRITE: [
                MessageHandler(Filters.text & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"),
                               rewrite)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel),
                   MessageHandler(Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"), cancel),
                   CommandHandler("help", instructions_handler)]
    )

    register_handler = ConversationHandler(
        entry_points=[CommandHandler('authorize', register)],
        states={
            CONTACT: [
                MessageHandler(Filters.contact & ~Filters.command, add_admin)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_register),
                   MessageHandler(Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"), cancel_register)]
    )

    report_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.text("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É"), start_report)],
        states={
            REPORT: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), add_report_description)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_report),
                   MessageHandler(Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), cancel_report)]
    )

    review_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^(–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫|/review)$'), start_review)],
        states={
            REVIEW: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), send_review)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_report),
                   MessageHandler(Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), cancel_report)]
    )

    statistics = ConversationHandler(
        entry_points=[CommandHandler('statistics', statistics_for_user)],
        states={
            STATISTICS: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), show_statistics)
            ],
            SEND_FILES: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.regex('^(–°–∫–∞—Å—É–≤–∞—Ç–∏|–ó–∞–≤–µ—Ä—à–∏—Ç–∏)$'), send_files)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_statistics),
                   MessageHandler(Filters.regex('^(–°–∫–∞—Å—É–≤–∞—Ç–∏|–ó–∞–≤–µ—Ä—à–∏—Ç–∏)$'), cancel_statistics)]
    )

    ban = ConversationHandler(
        entry_points=[CommandHandler('ban', start_ban)],
        states={
            REASON: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), get_reason)
            ],
            BAN: [
                MessageHandler(Filters.text & ~Filters.command & ~Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), ban_user)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_ban),
                   MessageHandler(Filters.text("–°–∫–∞—Å—É–≤–∞—Ç–∏"), cancel_ban)]
    )

    dispatcher.add_handler(statistics)
    dispatcher.add_handler(register_handler)
    dispatcher.add_handler(report_handler)
    dispatcher.add_handler(review_handler)
    dispatcher.add_handler(add_handler)
    dispatcher.add_handler(start)
    dispatcher.add_handler(scan)
    dispatcher.add_handler(decoder)
    dispatcher.add_handler(not_file)
    dispatcher.add_handler(end_scan)
    dispatcher.add_handler(instructions)
    dispatcher.add_handler(cancel_echo)
    dispatcher.add_handler(ban)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
