"""
Author: Andrew Yaroshevych
Version: 2.0.0
"""
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import Updater, Filters, CallbackContext, CommandHandler, MessageHandler

from PIL import Image
from pyzbar.pyzbar import decode

import os
import logging
import configparser

import requests
import bs4
import re

from pymongo import MongoClient

logging.basicConfig(
    format='Time: %(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

config = configparser.ConfigParser()
config.read("config.ini")

cluster = MongoClient(config['Database']['cluster'])

db = cluster.TestBotDatabase
collection = db.TestBotCollection


def start_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–°–∫–∞–Ω—É–≤–∞—Ç–∏', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó', '–ü—Ä–æ –º–µ–Ω–µ']]

    update.message.reply_text(
        'üá∫üá¶ '
        '*–ü—Ä–∏–≤—ñ—Ç\! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤\.*'
        '\n–Ø –¥–æ–ø–æ–º–æ–∂—É –í–∞–º –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ–∫–∏\.'
        '\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é, –±—É–¥—å –ª–∞—Å–∫–∞\. –Ø–∫—â–æ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –±–æ—Ç–æ–º –≤–ø–µ—Ä—à–µ \- —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–¥—ñ–ª "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"'
        '\n\n–¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –±—É–¥—å\-–∫–æ–ª–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ */help*',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é'
        ),
    )


def scan_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è']]

    update.message.reply_text(
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–æ—Ç–æ –ø–∞–∫—É–≤–∞–Ω–Ω—è, –¥–µ —è –º–æ–∂—É *—á—ñ—Ç–∫–æ* –ø–æ–±–∞—á–∏—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥\.',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ'
        ),
    )


def end_scan_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–°–∫–∞–Ω—É–≤–∞—Ç–∏', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó']]

    update.message.reply_text(
        '‚òëÔ∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é'),
    )


def instructions_handler(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–ó—Ä–æ–∑—É–º—ñ–ª–æ!']]

    pic = 'resources/How_to_scan.png'
    update.message.reply_photo(open(pic, 'rb'),
                               caption='üîç –©–æ–± –≤—ñ–¥—Å–∫–∞–Ω—É–≤–∞—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –ª—ñ–∫—ñ–≤ \- –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–æ—Ç–æ '
                                       '–ø–∞–∫—É–≤–∞–Ω–Ω—è, –¥–µ —è –º–æ–∂—É *—á—ñ—Ç–∫–æ* –ø–æ–±–∞—á–∏—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥\.'
                                       '\n\n‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —É –±—É–¥—å\-—è–∫–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ */scan*'
                                       '\n\n‚úèÔ∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –æ–¥—Ä–∞–∑—É –¥–µ–∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π\.'
                                       '\n\n‚ùóÔ∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è *–Ω–µ —Ä–æ–∑–º–∏—Ç–∞*, –∞ —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∏–π '
                                       '*–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ* –∞–±–æ *–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ*\. '
                                       '–ù–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π—Ç–µ –Ω–∞–¥—Ç–æ –¥–∞–ª–µ–∫–æ, —Ç–∞ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—å —Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–º–µ—Ä—É *–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ* '
                                       '–¥–æ —É–ø–∞–∫–æ–≤–∫–∏\! '
                                       '\n–¶–µ –º—ñ–Ω—ñ–º—ñ–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –¥–æ–∑–≤–æ–ª–∏—Ç—å –±–æ—Ç—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ\.'
                                       '\n\n‚úÖ –ü—ñ—Å–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–∞–ª—ñ\. '
                                       '\n–ê–±–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è \- –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É\.'
                                       '\n\n ‚Ü©Ô∏è –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –±—É–¥—å\-—è–∫—É –¥—ñ—é –º–æ–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–æ—é */cancel*'
                                       '\n\n üí¨ –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –±—É–¥—å\-—è–∫–∏–π –º–æ–º–µ–Ω—Ç, '
                                       '–Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É */help*',
                               parse_mode='MarkdownV2',
                               reply_markup=ReplyKeyboardMarkup(
                                   reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
                                   input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é'),
                               )


def goto_scan(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    if update.message.text != '–©–µ —Ä–∞–∑':
        update.message.reply_text(
            '–¶–µ –¥–æ–±—Ä–µüòä –ú–æ–∂–µ–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è.',
            reply_markup=ReplyKeyboardRemove(),
        )
    return scan_handler(update=update, context=context)


def db_query(code) -> str:
    if collection.count_documents({"code": code}) != 0:
        query_result = collection.find_one({"code": code}, {"_id": 0})
        output = f"<b>–®—Ç—Ä–∏—Ö-–∫–æ–¥</b>: {query_result['code']}" \
                 f"\n<b>–ù–∞–∑–≤–∞</b>: {query_result['name']} " \
                 f"\n<b>–î—ñ—é—á–∞ —Ä–µ—á–æ–≤–∏–Ω–∞</b>: {query_result['active_ingredient']} " \
                 f"\n<b>–û–ø–∏—Å</b>: {query_result['description']} "
        return output
    else:
        return "–¶–µ–π —à—Ç—Ä–∏—Ö-–∫–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –º–æ—ó–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö ‚ùå"


# noinspection DuplicatedCode
def retrieve_results(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: Photo received", user.first_name)

    if update.message.photo:
        id_img = update.message.photo[-1].file_id
    else:
        return

    foto = context.bot.getFile(id_img)

    new_file = context.bot.get_file(foto.file_id)
    new_file.download('code.png')

    try:
        result = decode(Image.open('code.png'))
        code_str = result[0].data.decode("utf-8")
        link = 'https://www.google.com/search?q=' + code_str

        reply_keyboard = [['–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è']]

        update.message.reply_text(parse_mode='HTML',
                                  reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                                   resize_keyboard=True,
                                                                   input_field_placeholder='–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ'),
                                  text='–û—Å—å –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥ ‚úÖ:\n' + '<b>' + code_str + '</b>' +
                                       '<b>' + '\n\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n' + '</b>' +
                                       db_query(code_str),
                                  quote=True)

        # update.message.reply_text(parse_mode='HTML',
        #                           reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
        #                                                            resize_keyboard=True,
        #                                                            input_field_placeholder='–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ'),
        #                           text='<b>' + '–¢–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü–µ–π —à—Ç—Ä–∏—Ö–∫–æ–¥ —É Google:' + '</b>' +
        #                                '\n\n–ô–º–æ–≤—ñ—Ä–Ω–æ —Ü–µ: ' + '<b>' + get_query_heading(code_str) + '</b>' +
        #                                ' - ' + f'<a href="{link}"><b>Google</b></a>')

    except IndexError as e:
        logger.info(e)

        reply_keyboard = [['–©–µ —Ä–∞–∑', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó']]

        update.message.reply_text(text="*–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ ‚ùå *"
                                       "\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ "
                                       "–ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ä–æ–±–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\.",
                                  quote=True,
                                  parse_mode='MarkdownV2',
                                  reply_markup=ReplyKeyboardMarkup(
                                      reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
                                      input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é'
                                  )),
    finally:
        os.remove("code.png")


def get_query_heading(barcode) -> str:
    url = 'https://google.com/search?q=' + barcode

    request_result = requests.get(url)
    soup = bs4.BeautifulSoup(request_result.text, "html.parser")

    heading_objects = soup.find_all('h3')
    first_heading = heading_objects[0]

    first_heading_formatted = re.sub(r"\([^()]*\)", "", first_heading.getText().split(' - ')[0]
                                     .replace(str(barcode), '')).lstrip().rstrip('.').rstrip()
    return first_heading_formatted


def file_warning(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: File warning", user.first_name)

    reply_keyboard = [['–©–µ —Ä–∞–∑']]

    update.message.reply_text(
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é*, –∞ –Ω–µ —Ñ–∞–π–ª\.',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder='–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ'
        ),
    )


def undefined_input(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–°–∫–∞–Ω—É–≤–∞—Ç–∏', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó']]

    update.message.reply_text(
        '–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é üßê.\n–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é'),
    )


def cancel_operation(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–°–∫–∞–Ω—É–≤–∞—Ç–∏', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó']]

    update.message.reply_text(
        '‚òëÔ∏è –ì–∞—Ä–∞–∑–¥, –æ–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
        parse_mode='MarkdownV2',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
                                         input_field_placeholder='–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é'),
    )


def tell_about(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("%s: %s", user.first_name, update.message.text)

    reply_keyboard = [['–ó—Ä–æ–∑—É–º—ñ–ª–æ!']]

    update.message.reply_text(
        '–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶\n\n'
        'ü§ñ –Ø - –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ—é —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑—ñ –õ—å–≤–æ–≤–∞.\n\n‚úÖ –ú–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º, —â–æ –ø—Ä–∞w—é—é—Ç—å –Ω–∞ '
        '–ø—É–Ω–∫n–∞—Ö —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≥—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏. –Ø –¥–æ–ø–æ–º–æ–∂—É –í–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ –º–µ–¥–∏—á–Ω—ñ '
        '–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —à—Ç—Ä–∏—Ö-–∫–æ–¥—É.'
        '\n\nü•á –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –ø—Ä–∏—à–≤–∏–¥—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É, –∞ —Ç–∞–∫–æ–∂ —è–∫—ñ—Å—Ç—å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤ '
        '–¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –ó–±—Ä–æ–π–Ω–∏–º –°–∏–ª–∞–º –£–∫—Ä–∞—ó–Ω–∏ üíõüíô',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )


def main() -> None:
    # noinspection SpellCheckingInspection
    updater = Updater(config['Telegram']['token'])
    dispatcher = updater.dispatcher

    start = CommandHandler('start', start_handler)
    scan = MessageHandler(Filters.regex('^(–°–∫–∞–Ω—É–≤–∞—Ç–∏|/scan)$'), scan_handler)
    end_scan = MessageHandler(Filters.regex('^(–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è|–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è)$'), end_scan_handler)
    instructions = MessageHandler(Filters.regex('^(–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó|/help)$'), instructions_handler)
    continue_scan = MessageHandler(Filters.regex('^(–ó—Ä–æ–∑—É–º—ñ–ª–æ!|–©–µ —Ä–∞–∑)$'), goto_scan)
    decoder = MessageHandler(Filters.photo, retrieve_results)
    not_file = MessageHandler(Filters.attachment, file_warning)
    do_not_understand = MessageHandler(~ Filters.regex('^(–°–∫–∞–Ω—É–≤–∞—Ç–∏|/scan)$') &
                                       ~ Filters.regex('^(–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó|/help)$') &
                                       ~ Filters.regex('^(–ó—Ä–æ–∑—É–º—ñ–ª–æ!|–©–µ —Ä–∞–∑)$') &
                                       ~ Filters.regex('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è') &
                                       ~ Filters.regex('–ü—Ä–æ –º–µ–Ω–µ') &
                                       ~ Filters.photo &
                                       ~ Filters.attachment, undefined_input)
    cancel = CommandHandler('cancel', cancel_operation)
    about = MessageHandler(Filters.regex('–ü—Ä–æ –º–µ–Ω–µ'), tell_about)

    dispatcher.add_handler(start)
    dispatcher.add_handler(scan)
    dispatcher.add_handler(end_scan)
    dispatcher.add_handler(cancel)
    dispatcher.add_handler(instructions)
    dispatcher.add_handler(continue_scan)
    dispatcher.add_handler(decoder)
    dispatcher.add_handler(not_file)
    dispatcher.add_handler(do_not_understand)
    dispatcher.add_handler(about)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
